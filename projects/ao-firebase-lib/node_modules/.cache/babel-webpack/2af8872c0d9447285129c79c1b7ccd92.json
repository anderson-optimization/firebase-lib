{"ast":null,"code":"import _asyncToGenerator from \"/home/dmitriy/workspace/ao-firebase-lib/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { resourcesApis } from '../../lib/_lib/vars';\nimport { firebaseLibInitializerForFirebase } from './_fixtures/firebase-lib-initializer-for-firebase';\ndescribe('Firebase Api', () => {\n  let resources;\n  beforeAll(() => {\n    firebaseLibInitializerForFirebase();\n    resources = resourcesApis.firebase;\n  });\n  describe('get()', () => {\n    it('retrieves an entirety of resource data', /*#__PURE__*/_asyncToGenerator(function* () {\n      let name = yield resources.name.get();\n      expect(name).toEqual({\n        dmitriy: 'nesterkin'\n      });\n    }));\n    it('gets a subset of a resource via a string path', /*#__PURE__*/_asyncToGenerator(function* () {\n      let name = yield resources.name.get('dmitriy');\n      expect(name).toEqual('nesterkin');\n    }));\n    it('obtains a subset of a resource via an array path', /*#__PURE__*/_asyncToGenerator(function* () {\n      let user = yield resources.users.userInfo.get([-1, 'name']);\n      expect(user).toEqual({\n        first: 'Tom',\n        last: 'Brady'\n      });\n    }));\n    it('fetches a subset of a resource using a query', /*#__PURE__*/_asyncToGenerator(function* () {\n      let query = [['orderByKey'], ['limitToFirst', 1]];\n      let color = yield resources.colors.colorInfo.get(null, query);\n      expect(color).toEqual({\n        blue: {\n          hex: '0000FF',\n          rgb: '0,0,255'\n        }\n      });\n    }));\n    it('grabs a snapshot of a resource by using a params object', /*#__PURE__*/_asyncToGenerator(function* () {\n      let path = '-3';\n      let options = {\n        returnSnapshot: true\n      };\n      let user = yield resources.users.userInfo.get({\n        path,\n        options\n      });\n      expect(user.child('name/first').val()).toBe('Cam');\n    }));\n    it('returns \"null\" when path to a resource is incorrect', /*#__PURE__*/_asyncToGenerator(function* () {\n      let user = yield resources.users.userInfo.get('incorrect');\n      expect(user).toBe(null);\n    }));\n  });\n  describe('set()', () => {\n    it('replaces the entire record', /*#__PURE__*/_asyncToGenerator(function* () {\n      let update = {\n        someting: 'another'\n      };\n      let result = yield resources.name.set(null, update);\n    }));\n  });\n  describe('transaction()', () => {});\n  describe('update()', () => {});\n});","map":{"version":3,"sources":["/home/dmitriy/workspace/ao-firebase-lib/projects/ao-firebase-lib/src/test/firebase/firebase-lib.firebase.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {resourcesApis}                     from '../../lib/_lib/vars'\nimport {firebaseLibInitializerForFirebase} from './_fixtures/firebase-lib-initializer-for-firebase'\n\ndescribe('Firebase Api', () => {\n  let resources;\n  \n  beforeAll(() => {\n    firebaseLibInitializerForFirebase();\n    resources = resourcesApis.firebase;\n  });\n  \n  describe('get()', () => {\n    it('retrieves an entirety of resource data', async () => {\n      let name = await resources.name.get();\n      expect(name).toEqual({dmitriy: 'nesterkin'});\n    });\n    \n    it('gets a subset of a resource via a string path', async () => {\n      let name = await resources.name.get('dmitriy');\n      expect(name).toEqual('nesterkin');\n    });\n    \n    it('obtains a subset of a resource via an array path', async () => {\n      let user = await resources.users.userInfo.get([-1, 'name']);\n      expect(user).toEqual({first: 'Tom', last: 'Brady'});\n    });\n    \n    it('fetches a subset of a resource using a query', async () => {\n      let query = [\n        ['orderByKey'],\n        ['limitToFirst', 1]\n      ];\n      let color = await resources.colors.colorInfo.get(null, query);\n      expect(color).toEqual({blue: {hex: '0000FF', rgb: '0,0,255'}});\n    });\n    \n    it('grabs a snapshot of a resource by using a params object', async () => {\n      let path = '-3';\n      let options = {returnSnapshot: true};\n      let user = await resources.users.userInfo.get({path, options});\n      expect(user.child('name/first').val()).toBe('Cam');\n    });\n    \n    it('returns \"null\" when path to a resource is incorrect', async () => {\n      let user = await resources.users.userInfo.get('incorrect');\n      expect(user).toBe(null);\n    });\n  });\n  \n  describe('set()', () => {\n    it('replaces the entire record', async () => {\n      let update = {\n        someting: 'another'\n      };\n      \n      let result = await resources.name.set(null, update);\n    });\n  });\n  \n  describe('transaction()', () => {\n    \n  });\n  \n  describe('update()', () => {\n    \n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}